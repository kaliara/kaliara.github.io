import * as React from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    FrameProps,
    // Stack,
} from "framer"
import { Icon } from "./Icon"
// import { Text } from "./Text"
import { colors } from "./canvas"
import { useInteractionState } from "./Hooks"

type Props = Partial<FrameProps> &
    Partial<{
        text: string
        icon: string
        contentType: string
        alignIcon: string
        type: string
        toggle: boolean
        toggled: boolean
        disabled: boolean
        scrollTarget: string
        setData: string
        onTap?: (toggled: boolean | null) => void
    }>

export function Button(props: Props) {
    const {
        type,
        text,
        contentType,
        icon,
        alignIcon,
        onTap,
        disabled,
        toggle,
        toggled: initialToggled,
        style,
        ...rest
    } = props

    /* ---------------------------------- State --------------------------------- */

    // Initialize state with props values
    const [state, setState] = React.useState({
        toggled: toggle ? initialToggled || false : null,
    })

    // When the hook receives new props, overwrite the state
    React.useEffect(() => {
        setState({
            ...state,
            toggled: toggle ? initialToggled || false : null,
        })
    }, [initialToggled])

    const [interactiveState, interactiveProps] = useInteractionState({
        disabled,
        toggled: state.toggled,
        style,
    })

    /* ----------------------------- Event Handlers ----------------------------- */

    // When the user taps on the button, run onTap and update toggled
    const handleTap = (event, info) => {
        if (toggle) {
            const toggled = !state.toggled
            onTap(toggled)
            setState({
                ...state,
                toggled,
            })
        } else {
            onTap(null)
        }
    }

    // Allow scrolling to specific frames
    const handleScroll = (event, info) => {
        const element = document.querySelector(`[data-framer-name="${props.scrollTarget}"]`)
        if (element) {
          window.scroll({
            //@ts-ignore
            top: element.offsetTop - 50,
            behavior: 'smooth'
          });
        }
    }
    const scrollInteraction =
      props.scrollTarget.length > 0
        ? { onClick: handleScroll }
        : {}

    /* ------------------------------ Presentation ------------------------------ */

    const theme = {
        primary: {
          style: {
            color: colors["btn-primary-text"],
            background: colors["btn-primary-bg"],
            fontSize: '16px',
          }
        },
        primarySmall: {
          style: {
            color: colors["btn-primary-text"],
            background: colors["btn-primary-bg"],
            fontSize: '12px'
          }
        },
        primaryLarge: {
          style: {
            color: colors["btn-primary-text"],
            background: colors["btn-primary-bg"],
            fontSize: '24px'
          }
        },
        secondary: {
          style: {
            color: colors["btn-secondary-text"],
            background: colors["btn-secondary-bg"],
            fontSize: '16px',
          }
        },
        secondarySmall: {
          style: {
            color: colors["btn-secondary-text"],
            background: colors["btn-secondary-bg"],
            fontSize: '12px',
          }
        },
        secondaryLarge: {
          style: {
            color: colors["btn-secondary-text"],
            background: colors["btn-secondary-bg"],
            fontSize: '24px',
          }
        },
        accent: {
          style: {
            color: colors["btn-primary-text"],
            background: colors["accent"],
            fontSize: '16px',
          }
        },
        accentLarge: {
          style: {
            color: colors["btn-primary-text"],
            background: colors["accent"],
            fontSize: '24px',
          }
        },
        ghost: {
          style: {
            color: colors["btn-text"],
            background: "none",
            fontSize: '16px',
          }
        },
    }

    const variants = {
        initial: {},
        hovered: {
            style: {
                filter: `brightness(0.8)`,
            },
        },
        toggled: {
            style: {
                filter: `brightness(.8)`,
            },
        },
        active: {
            style: {
                filter: `brightness(.7)`,
            },
        },
    }

    const variant =
        type === "ghost"
            ? { border: `1px solid ${colors["btn-bg"]}` }
            : variants[interactiveState]

    const iconComponent = <Icon icon={icon} color={theme[type].foreground} />

    return (
        <Frame
            {...rest}
            {...interactiveProps}
            {...variant}
            {...scrollInteraction}
            onTap={!disabled && handleTap}
            style={{ ...theme[type].style, ...variant.style, ...interactiveProps.style, ...style }}
        >
            {text}
        </Frame>
    )
}

// <Stack
//     width="100%"
//     height="100%"
//     alignment="center"
//     distribution="center"
//     direction="horizontal"
//     gap={-4}
// >
//     {contentType === "both" &&
//         alignIcon === "left" &&
//         iconComponent}
//     {contentType === "icon" ? (
//         iconComponent
//     ) : (
//         <Text
//             resize
//             // Constant props
//             type="link"
//             color={theme[type].foreground}
//             fontSize={30}
//             text={text}
//         />
//     )}
//     {contentType === "both" &&
//         alignIcon === "right" &&
//         iconComponent}
// </Stack>

Button.defaultProps = {
    height: 60,
    width: 320,
    borderRadius: 8,
    disabled: false,
    text: "Get Started!",
    icon: "check",
    type: "primary",
    primary: true,
    toggle: false,
    style: {
      fontFamily: '"Avenir", "Avenir Next", "Trebuchet MS", "Trebuchet", "Helvetica Neue", Helvetica, sans-serif',
      fontWeight: 500,
      color: colors['btn-text'],
      borderRadius: '2px',
      textShadow: '0 0 2px rgba(0,0,0,0.5)'
    },
    onTap: () => null,
}

addPropertyControls(Button, {
    text: {
        type: ControlType.String,
        title: "Text",
        defaultValue: "Get Started",
    },
    type: {
        title: "Type",
        type: ControlType.Enum,
        options: ["primary", "primarySmall", "primaryLarge", "secondary", "secondarySmall", "secondaryLarge", "accent", "accentLarge", "ghost"],
        optionTitles: [
            "Primary",
            "Primary Small",
            "Primary Large",
            "Secondary",
            "Secondary Small",
            "Secondary Large",
            "Accent",
            "Accent Large",
            "Ghost",
        ],
        defaultValue: "primary",
    },
    contentType: {
        title: "Show",
        type: ControlType.SegmentedEnum,
        options: ["text", "icon", "both"],
        optionTitles: ["Text", "Icon", "Both"],
        defaultValue: "text",
    },
    alignIcon: {
        title: "Align icon",
        type: ControlType.SegmentedEnum,
        options: ["left", "right"],
        optionTitles: ["<", ">"],
        defaultValue: "left",
        hidden: ({ contentType }) => contentType === "text",
    },
    // icon: {
    //     title: "Icon",
    //     type: ControlType.Enum,
    //     options: iconNames,
    //     optionTitles: iconTitles,
    //     defaultValue: "check",
    //     hidden: ({ contentType }) => contentType === "text",
    // },
    toggle: {
        type: ControlType.Boolean,
        title: "Toggle",
        defaultValue: false,
    },
    toggled: {
        type: ControlType.Boolean,
        title: "Toggled",
        defaultValue: false,
        hidden: ({ toggle }) => !toggle,
    },
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled",
        defaultValue: false,
    },
    scrollTarget: {
        type: ControlType.String,
        title: "Scroll To",
        placeholder: "Frame Name",
    },
    setData: {
        type: ControlType.String,
        title: "Set Data",
        displayTextArea: true,
        placeholder: "{name: 'Matthew', switchIndex: 1}",
    },
    onClick: {
        type: ControlType.EventHandler,
    },
})
